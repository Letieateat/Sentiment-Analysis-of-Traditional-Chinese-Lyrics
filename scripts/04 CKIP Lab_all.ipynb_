{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Y7aqtxlIFLuS4cxutDAkfhq9B7ZJ5bE6","timestamp":1714731747114},{"file_id":"1fYyvwfzEszj2KH11psRrYNochCpkv6GD","timestamp":1714038762508}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nrAtEv_TO5lU","executionInfo":{"status":"ok","timestamp":1715517308778,"user_tz":-120,"elapsed":5025,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"b5f1ef9f-96c5-42ed-eb49-8d295e869243"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.40.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.14.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.20.3)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.12.25)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.2.2)\n"]}]},{"cell_type":"code","source":["import torch\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from torch.utils.data import DataLoader, Dataset\n","from torch.optim import AdamW\n","from transformers import BertTokenizerFast, BertForSequenceClassification\n","from transformers import BertConfig\n","from transformers import AdamW as TransformersAdamW\n","from transformers import get_linear_schedule_with_warmup\n","from torch.optim.lr_scheduler import ReduceLROnPlateau\n","import matplotlib.pyplot as plt\n","from google.colab import drive\n","from sklearn.metrics import accuracy_score, classification_report"],"metadata":{"id":"yvF-qccLj1qq","executionInfo":{"status":"ok","timestamp":1715517621465,"user_tz":-120,"elapsed":3516,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["class LyricsDataset(Dataset):\n","    def __init__(self, texts, labels, tokenizer, max_len=512):\n","        self.texts = texts\n","        self.labels = labels\n","        self.tokenizer = tokenizer\n","        self.max_len = max_len\n","\n","    def __len__(self):\n","        return len(self.texts)\n","\n","    def __getitem__(self, idx):\n","        text = self.texts[idx]\n","        label = self.labels[idx]\n","        encoding = self.tokenizer.encode_plus(\n","            text,\n","            add_special_tokens=True,\n","            max_length=self.max_len,\n","            return_token_type_ids=False,\n","            padding='max_length',\n","            truncation=True,\n","            return_attention_mask=True,\n","            return_tensors='pt',\n","        )\n","        return {\n","            'input_ids': encoding['input_ids'].flatten(),\n","            'attention_mask': encoding['attention_mask'].flatten(),\n","            'labels': torch.tensor(label, dtype=torch.long)\n","        }"],"metadata":{"id":"j4I8II33sJtx","executionInfo":{"status":"ok","timestamp":1715517631424,"user_tz":-120,"elapsed":256,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Load the CSV file into a DataFrame\n","file_path = 'https://raw.githubusercontent.com/Letieateat/Sentiment-Analysis-on-Traditional-Chinese-Lyrics/main/dataset/final_sentiments.csv'\n","df = pd.read_csv(file_path)\n","\n","# Select only the three specific columns\n","df = df[['final_lyrics', 'human_all']]"],"metadata":{"id":"1f2Wmz5FRnaj","executionInfo":{"status":"ok","timestamp":1715517648517,"user_tz":-120,"elapsed":801,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["label_map = {'Angry': 0, 'Anxious': 1, 'Sad': 2, 'Serene': 3, 'Relaxed': 4, 'Happy': 5, 'Excited': 6}\n","df['labels'] = df['human_all'].map(label_map)\n","df.rename(columns={'final_lyrics': 'Input'}, inplace=True)"],"metadata":{"id":"h6PI6I0OsmuS","executionInfo":{"status":"ok","timestamp":1715517669976,"user_tz":-120,"elapsed":550,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Load model & tokenizer\n","tokenizer = BertTokenizerFast.from_pretrained('ckiplab/bert-base-chinese')\n","config = BertConfig.from_pretrained('ckiplab/bert-base-chinese', num_labels=len(label_map))\n","model = BertForSequenceClassification.from_pretrained('ckiplab/bert-base-chinese', config=config)\n","model.bert.embeddings.dropout.p = 0.3\n","model.dropout.p = 0.3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dVJ7WFqJXjb9","executionInfo":{"status":"ok","timestamp":1715517673929,"user_tz":-120,"elapsed":2483,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"bd7e3460-1213-46f0-ed2b-a14b99b5a9a5"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n","Some weights of BertForSequenceClassification were not initialized from the model checkpoint at ckiplab/bert-base-chinese and are newly initialized: ['bert.pooler.dense.bias', 'bert.pooler.dense.weight', 'classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}]},{"cell_type":"code","source":["# Check the availability of GPU\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(device)"],"metadata":{"id":"qIq-B0f4yJ5b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715517678370,"user_tz":-120,"elapsed":644,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"c139c1c2-f685-445e-fb41-e11bc7d150c6"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BertForSequenceClassification(\n","  (bert): BertModel(\n","    (embeddings): BertEmbeddings(\n","      (word_embeddings): Embedding(21128, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (token_type_embeddings): Embedding(2, 768)\n","      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","      (dropout): Dropout(p=0.3, inplace=False)\n","    )\n","    (encoder): BertEncoder(\n","      (layer): ModuleList(\n","        (0-11): 12 x BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1, inplace=False)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","              (dropout): Dropout(p=0.1, inplace=False)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","            (intermediate_act_fn): GELUActivation()\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","            (dropout): Dropout(p=0.1, inplace=False)\n","          )\n","        )\n","      )\n","    )\n","    (pooler): BertPooler(\n","      (dense): Linear(in_features=768, out_features=768, bias=True)\n","      (activation): Tanh()\n","    )\n","  )\n","  (dropout): Dropout(p=0.3, inplace=False)\n","  (classifier): Linear(in_features=768, out_features=7, bias=True)\n",")"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Prepare datasets\n","train, temp = train_test_split(df, test_size=0.3, random_state=42)\n","val, test = train_test_split(temp, test_size=0.5, random_state=42)\n","\n","train_dataset = LyricsDataset(train['Input'].tolist(), train['labels'].tolist(), tokenizer)\n","val_dataset = LyricsDataset(val['Input'].tolist(), val['labels'].tolist(), tokenizer)\n","test_dataset = LyricsDataset(test['Input'].tolist(), test['labels'].tolist(), tokenizer)\n","\n","train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)\n","val_loader = DataLoader(val_dataset, batch_size=8)\n","test_loader = DataLoader(test_dataset, batch_size=8)"],"metadata":{"id":"Y0aBpAQRsZFo","executionInfo":{"status":"ok","timestamp":1715517706627,"user_tz":-120,"elapsed":423,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Set up the optimizer\n","optimizer = AdamW(model.parameters(), lr=1e-5)\n","scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=3)"],"metadata":{"id":"en0b2JPGGI8p","executionInfo":{"status":"ok","timestamp":1715517715020,"user_tz":-120,"elapsed":1251,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Training\n","\n","train_losses, val_losses = [], []\n","train_accuracies, val_accuracies = [], []\n","best_model_path = 'best_model.pth'\n","best_val_accuracy = 0\n","best_val_loss = float('inf')\n","early_stopping_counter = 0\n","early_stopping_patience = 3\n","\n","for epoch in range(10):\n","    model.train()\n","    total_train_loss = 0\n","    correct_train_predictions = 0\n","    total_train_samples = 0\n","\n","    for batch in train_loader:\n","        batch = {k: v.to(device) for k, v in batch.items()}\n","        outputs = model(**batch)\n","        loss = outputs.loss\n","        loss.backward()\n","        optimizer.step()\n","        optimizer.zero_grad()\n","        total_train_loss += loss.item()\n","\n","        logits = outputs.logits\n","        predictions = torch.argmax(logits, dim=1)\n","        correct_train_predictions += (predictions == batch['labels']).sum().item()\n","        total_train_samples += len(batch['labels'])\n","\n","    avg_train_loss = total_train_loss / len(train_loader)\n","    train_losses.append(avg_train_loss)\n","    train_accuracy = correct_train_predictions / total_train_samples\n","    train_accuracies.append(train_accuracy)\n","\n","    model.eval()\n","    total_val_loss = 0\n","    total_val_accuracy = 0\n","    for batch in val_loader:\n","        batch = {k: v.to(device) for k, v in batch.items()}\n","        with torch.no_grad():\n","            outputs = model(**batch)\n","            loss = outputs.loss\n","            logits = outputs.logits\n","            predictions = torch.argmax(logits, dim=1)\n","            total_val_loss += loss.item()\n","            total_val_accuracy += (predictions == batch['labels']).sum().item()\n","\n","    avg_val_loss = total_val_loss / len(val_loader)\n","    avg_val_accuracy = total_val_accuracy / len(val_loader.dataset)\n","    val_losses.append(avg_val_loss)\n","    val_accuracies.append(avg_val_accuracy)\n","\n","    print(f'Epoch {epoch+1}, Train Loss: {avg_train_loss}, Train Accuracy: {train_accuracy}, Val Loss: {avg_val_loss}, Val Accuracy: {avg_val_accuracy}')\n","\n","    # Early stopping\n","    if avg_val_loss < best_val_loss or avg_val_accuracy > best_val_accuracy:\n","        if avg_val_loss < best_val_loss:\n","            best_val_loss = avg_val_loss\n","        if avg_val_accuracy > best_val_accuracy:\n","            best_val_accuracy = avg_val_accuracy\n","            torch.save(model.state_dict(), best_model_path)  # save the model\n","            print(f'Saved new best model based on accuracy: Accuracy = {best_val_accuracy}')\n","        early_stopping_counter = 0  # reset the counter\n","    else:\n","        early_stopping_counter += 1\n","        if early_stopping_counter >= early_stopping_patience:\n","            print(\"Early stopping triggered!\")\n","            break\n","\n","# Load the best model for testing or further usage\n","model.load_state_dict(torch.load(best_model_path))\n","model.to(device)\n"],"metadata":{"id":"YRqTeSjj-Xc9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715518262864,"user_tz":-120,"elapsed":543944,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"54083b66-1cf2-4401-e287-06fb8f361955"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1, Train Loss: 1.7304181212728673, Train Accuracy: 0.39657631954350925, Val Loss: 1.6398318378548873, Val Accuracy: 0.4266666666666667\n","Saved new best model based on accuracy: Accuracy = 0.4266666666666667\n","Epoch 2, Train Loss: 1.57733413238417, Train Accuracy: 0.41512125534950073, Val Loss: 1.3733276693444503, Val Accuracy: 0.4533333333333333\n","Saved new best model based on accuracy: Accuracy = 0.4533333333333333\n","Epoch 3, Train Loss: 1.297787415033037, Train Accuracy: 0.5606276747503567, Val Loss: 1.1548401964338202, Val Accuracy: 0.56\n","Saved new best model based on accuracy: Accuracy = 0.56\n","Epoch 4, Train Loss: 1.0256095284765416, Train Accuracy: 0.6676176890156919, Val Loss: 1.2457992905064632, Val Accuracy: 0.52\n","Epoch 5, Train Loss: 0.8338735852051865, Train Accuracy: 0.7446504992867332, Val Loss: 0.9997553699894955, Val Accuracy: 0.64\n","Saved new best model based on accuracy: Accuracy = 0.64\n","Epoch 6, Train Loss: 0.5801811941306699, Train Accuracy: 0.8174037089871612, Val Loss: 1.4299872941092442, Val Accuracy: 0.5333333333333333\n","Epoch 7, Train Loss: 0.37742622586136515, Train Accuracy: 0.9172610556348074, Val Loss: 1.2230743985427053, Val Accuracy: 0.58\n","Epoch 8, Train Loss: 0.2427624353122982, Train Accuracy: 0.9429386590584878, Val Loss: 1.2873814592235966, Val Accuracy: 0.58\n","Early stopping triggered!\n"]},{"output_type":"execute_result","data":{"text/plain":["BertForSequenceClassification(\n","  (bert): BertModel(\n","    (embeddings): BertEmbeddings(\n","      (word_embeddings): Embedding(21128, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (token_type_embeddings): Embedding(2, 768)\n","      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","      (dropout): Dropout(p=0.3, inplace=False)\n","    )\n","    (encoder): BertEncoder(\n","      (layer): ModuleList(\n","        (0-11): 12 x BertLayer(\n","          (attention): BertAttention(\n","            (self): BertSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.1, inplace=False)\n","            )\n","            (output): BertSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","              (dropout): Dropout(p=0.1, inplace=False)\n","            )\n","          )\n","          (intermediate): BertIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","            (intermediate_act_fn): GELUActivation()\n","          )\n","          (output): BertOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","            (dropout): Dropout(p=0.1, inplace=False)\n","          )\n","        )\n","      )\n","    )\n","    (pooler): BertPooler(\n","      (dense): Linear(in_features=768, out_features=768, bias=True)\n","      (activation): Tanh()\n","    )\n","  )\n","  (dropout): Dropout(p=0.3, inplace=False)\n","  (classifier): Linear(in_features=768, out_features=7, bias=True)\n",")"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Testing\n","model.load_state_dict(torch.load(best_model_path))\n","model.to(device)\n","\n","model.eval()\n","total_test_loss = 0\n","total_test_accuracy = 0\n","all_true_labels = []\n","all_predictions = []\n","incorrect_predictions = []\n","\n","with torch.no_grad():\n","    for batch in test_loader:\n","        batch = {k: v.to(device) for k, v in batch.items()}\n","        outputs = model(**batch)\n","        loss = outputs.loss\n","        logits = outputs.logits\n","        predictions = torch.argmax(logits, dim=1)\n","        total_test_loss += loss.item()\n","        total_test_accuracy += (predictions == batch['labels']).sum().item()\n","\n","        # Collect all labels and predictions for classification report\n","        all_true_labels.extend(batch['labels'].cpu().numpy())\n","        all_predictions.extend(predictions.cpu().numpy())\n","\n","        # Capture incorrect predictions\n","        mismatches = predictions != batch['labels']\n","        if any(mismatches):\n","            incorrect_inputs = batch['input_ids'][mismatches]\n","            incorrect_labels = predictions[mismatches]\n","            true_labels = batch['labels'][mismatches]\n","            for input_ids, pred_label, true_label in zip(incorrect_inputs, incorrect_labels, true_labels):\n","                decoded_input = tokenizer.decode(input_ids, skip_special_tokens=True)\n","                incorrect_predictions.append({\n","                    'Lyric': decoded_input,\n","                    'Predicted Sentiment': list(label_map.keys())[list(label_map.values()).index(pred_label.item())],\n","                    'Actual Sentiment': list(label_map.keys())[list(label_map.values()).index(true_label.item())]\n","                })\n","\n","avg_test_loss = total_test_loss / len(test_loader)\n","avg_test_accuracy = total_test_accuracy / len(test_loader.dataset)\n","test_accuracy_score = accuracy_score(all_true_labels, all_predictions)\n","test_classification_report = classification_report(all_true_labels, all_predictions)\n","\n","print(f'Test Loss: {avg_test_loss}, Test Accuracy: {avg_test_accuracy}')\n","print(f'Test Accuracy Score: {test_accuracy_score}')\n","print(f'Test Classification Report:\\n{test_classification_report}')\n","\n","# Optionally save incorrect predictions to CSV, if any\n","if incorrect_predictions:\n","    df_incorrect = pd.DataFrame(incorrect_predictions)\n","    df_incorrect.to_csv('incorrect_predictions.csv', index=False)\n","    print(f\"Saved {len(incorrect_predictions)} incorrect predictions to 'incorrect_predictions.csv'\")\n","else:\n","    print(\"No incorrect predictions to save.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ly0uSBIgVyOE","executionInfo":{"status":"ok","timestamp":1715518312415,"user_tz":-120,"elapsed":5715,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"18181c87-f4c6-4c10-c4b3-71ca2ea26ef3"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Loss: 1.2408419345554553, Test Accuracy: 0.5960264900662252\n","Test Accuracy Score: 0.5960264900662252\n","Test Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.33      0.10      0.15        10\n","           1       0.57      0.55      0.56        22\n","           2       0.73      0.80      0.76        65\n","           3       0.62      0.36      0.45        14\n","           4       0.28      0.36      0.31        14\n","           5       0.60      0.71      0.65        17\n","           6       0.30      0.33      0.32         9\n","\n","    accuracy                           0.60       151\n","   macro avg       0.49      0.46      0.46       151\n","weighted avg       0.59      0.60      0.58       151\n","\n","Saved 61 incorrect predictions to 'incorrect_predictions.csv'\n"]}]},{"cell_type":"code","source":["# Plot the loss and accuracy for training and validation\n","plt.figure(figsize=(12, 6))\n","plt.subplot(1, 2, 1)\n","plt.plot(train_losses, color='green',label='Train Loss')\n","plt.plot(val_losses, color='blue',label='Val Loss')\n","plt.title('Training and Validation Loss over Epochs')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(train_accuracies, color='green', label='Train Accuracy')\n","plt.plot(val_accuracies, color='blue', label='Val Accuracy')\n","plt.title('Training and Validation Accuracy over Epochs')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"2O6jWbvSyhMV","executionInfo":{"status":"ok","timestamp":1715518341967,"user_tz":-120,"elapsed":1443,"user":{"displayName":"潘家碩","userId":"10928821688558552267"}},"outputId":"c4d10a13-a1eb-45c3-e9a3-374f64ad4752"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Save the model"],"metadata":{"id":"0FKtDB9HWpn8"}},{"cell_type":"code","source":["model_save_path = './CKIP_all.bin'\n","\n","torch.save(model, model_save_path)\n","torch.save(model.state_dict(), model_save_path)"],"metadata":{"id":"BSypI_qDDo_p","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"error","timestamp":1715002679750,"user_tz":-120,"elapsed":3294,"user":{"displayName":"LING YAN LI","userId":"12220954766231468852"}},"outputId":"fad54c7c-5cea-427a-d5a1-5f6d94089a00"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-889fe3009f1b>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel_save_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'./CKIP_all.bin'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_save_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_save_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(obj, f, pickle_module, pickle_protocol, _use_new_zipfile_serialization, _disable_byteorder_record)\u001b[0m\n\u001b[1;32m    627\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_use_new_zipfile_serialization\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0m_open_zipfile_writer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mopened_zipfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 629\u001b[0;31m             \u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopened_zipfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_module\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_protocol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_disable_byteorder_record\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    630\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    631\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/serialization.py\u001b[0m in \u001b[0;36m_save\u001b[0;34m(obj, zip_file, pickle_module, pickle_protocol, _disable_byteorder_record)\u001b[0m\n\u001b[1;32m    861\u001b[0m         \u001b[0;31m# Now that it is on the CPU we can directly copy it into the zip file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m         \u001b[0mnum_bytes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstorage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m         \u001b[0mzip_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite_record\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstorage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_ptr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_bytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["drive.mount('/content/drive')\n","model_save_path = '/content/drive/My Drive/CKIP_all.bin'\n","\n","# To save the entire model\n","torch.save(model, model_save_path)\n","\n","# Alternatively, to save only the state dictionary\n","torch.save(model.state_dict(), model_save_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jv9uQYcdWo9o","executionInfo":{"status":"ok","timestamp":1715002725780,"user_tz":-120,"elapsed":31799,"user":{"displayName":"LING YAN LI","userId":"12220954766231468852"}},"outputId":"684ae10a-32fc-4e53-d1a9-4848f8d3eda4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"OYz040CZWrrN"}}]}